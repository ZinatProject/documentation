{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Anfora This is the documentation to work with the Anfora Project.","title":"About"},{"location":"#welcome-to-anfora","text":"This is the documentation to work with the Anfora Project.","title":"Welcome to Anfora"},{"location":"client/","text":"JS Client API Creating content uploadStatus(data: Object, token: String) Create a new status using the data provided. The provided data can include public (boolean) : Whether the new status should be public or not. status (string): The caption for the status sensitive (boolean): Whether the status contains sensitive images. Basically a NSFW alert. media_ids (string): A list of media files represented by their id to add to the status. token is the string containing the user token. Returns an axios promise uploadComment(data: Object, token: String) Create a new comment. The data provided may include: public (boolean): Whether the comment is public or not. status (string): Actual message for the comment. sensitive (boolean): Whether the message includes some dangerous content. spoiler_text (string): A spoiler text to use when sensitive is true. in_reply_to_id (string): Mandatory. The id of the status we are commenting. token is the string containing the user token. uploadMedia(data: Object, token: String) Create a media object on the server. Data includes: file (blob): Mandatory. The image file. description (string): A description for the media. token is the string containing the user token. Retrive Data retriveImages(id: String) Retrive all the statuses for a given user. id is the identifier for the user. retriveStatus(id: String) Retrive the status with the given id. retriveUser(id: String) Retrive the profile info for the user with the given id . getFollowers(id: String) Retrive a list of user's profiles follwing the user with the given id . getFollowing(id: String) Retrive a list of user's profiles that the user with the given id is following. Actions removeStatus(id: String, token: String) Remove the status with the id given. token must be the owner's token. likeStatus(id: String, token: String) Like the status with the given id with the token credentials of the current user. dislikeStatus(id: String, token: String) Undo a like action over the status with the given id verifyCredentials(token: String) Verify that the current user matches the correct profile. This is used to to check if the token is still valid. Accounts passwordReset(data: Object) Change password for the current user. Data is an object with the following attributes: password (string): The new password password_confirmation (string): A confirmation for the password token (string): The token to auth the user","title":"Client API"},{"location":"client/#js-client-api","text":"","title":"JS Client API"},{"location":"client/#creating-content","text":"","title":"Creating content"},{"location":"client/#uploadstatusdata-object-token-string","text":"Create a new status using the data provided. The provided data can include public (boolean) : Whether the new status should be public or not. status (string): The caption for the status sensitive (boolean): Whether the status contains sensitive images. Basically a NSFW alert. media_ids (string): A list of media files represented by their id to add to the status. token is the string containing the user token. Returns an axios promise","title":"uploadStatus(data: Object, token: String)"},{"location":"client/#uploadcommentdata-object-token-string","text":"Create a new comment. The data provided may include: public (boolean): Whether the comment is public or not. status (string): Actual message for the comment. sensitive (boolean): Whether the message includes some dangerous content. spoiler_text (string): A spoiler text to use when sensitive is true. in_reply_to_id (string): Mandatory. The id of the status we are commenting. token is the string containing the user token.","title":"uploadComment(data: Object, token: String)"},{"location":"client/#uploadmediadata-object-token-string","text":"Create a media object on the server. Data includes: file (blob): Mandatory. The image file. description (string): A description for the media. token is the string containing the user token.","title":"uploadMedia(data: Object, token: String)"},{"location":"client/#retrive-data","text":"","title":"Retrive Data"},{"location":"client/#retriveimagesid-string","text":"Retrive all the statuses for a given user. id is the identifier for the user.","title":"retriveImages(id: String)"},{"location":"client/#retrivestatusid-string","text":"Retrive the status with the given id.","title":"retriveStatus(id: String)"},{"location":"client/#retriveuserid-string","text":"Retrive the profile info for the user with the given id .","title":"retriveUser(id: String)"},{"location":"client/#getfollowersid-string","text":"Retrive a list of user's profiles follwing the user with the given id .","title":"getFollowers(id: String)"},{"location":"client/#getfollowingid-string","text":"Retrive a list of user's profiles that the user with the given id is following.","title":"getFollowing(id: String)"},{"location":"client/#actions","text":"","title":"Actions"},{"location":"client/#removestatusid-string-token-string","text":"Remove the status with the id given. token must be the owner's token.","title":"removeStatus(id: String, token: String)"},{"location":"client/#likestatusid-string-token-string","text":"Like the status with the given id with the token credentials of the current user.","title":"likeStatus(id: String, token: String)"},{"location":"client/#dislikestatusid-string-token-string","text":"Undo a like action over the status with the given id","title":"dislikeStatus(id: String, token: String)"},{"location":"client/#verifycredentialstoken-string","text":"Verify that the current user matches the correct profile. This is used to to check if the token is still valid.","title":"verifyCredentials(token: String)"},{"location":"client/#accounts","text":"","title":"Accounts"},{"location":"client/#passwordresetdata-object","text":"Change password for the current user. Data is an object with the following attributes: password (string): The new password password_confirmation (string): A confirmation for the password token (string): The token to auth the user","title":"passwordReset(data: Object)"},{"location":"development/","text":"Development Client The client uses Vue.js as framework and yarn as package manager. To develop it follow this steps: Clone the repo https://github.com/anforaProject/client.git Install dependencies yarn install You'll need a connection to an existing server in order to interact with the app The base url of the server is defined in the .env file under the name VUE_APP_CLIENT_DOMAIN . By default it points to https://anfora.social . While this instance is up you can use the API of this server. To run the development server you can run yarn serve Server The process of installation for both the development and production environement is the same. Follow the instuctions in the installation page","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#client","text":"The client uses Vue.js as framework and yarn as package manager. To develop it follow this steps: Clone the repo https://github.com/anforaProject/client.git Install dependencies yarn install You'll need a connection to an existing server in order to interact with the app The base url of the server is defined in the .env file under the name VUE_APP_CLIENT_DOMAIN . By default it points to https://anfora.social . While this instance is up you can use the API of this server. To run the development server you can run yarn serve","title":"Client"},{"location":"development/#server","text":"The process of installation for both the development and production environement is the same. Follow the instuctions in the installation page","title":"Server"},{"location":"getting-started/","text":"Installation guide - WIP 0. Prerequisites We will using: A Ubuntu based distro Root access on the machine A domain Python 3.6 nginx (you can use apache too) 1. Setting up the environement Update your package list and system: sudo apt update sudo apt upgrade Older dristribution of ubuntu don't include python3.6 and we'll need it. Depending on your OS version you may need to install it. Install the dev packages and necessary things for python to compile packages. sudo apt install build-essential libssl-dev libffi-dev python3-dev You'll need git and yarn to download and install dependencies. sudo apt install git To install yarn please read the instructions at their official webpage Other dependencies redis-* - Used to queue tasks and as in-memory data store structure imagemagick - Image related operations ffmpeg - Conversion of videos to mp4 nodejs - Used for the streaming API To install them use: sudo apt install imagemagick ffmpeg nginx redis-server redis-tools postgresql postgresql-contrib python3-pip Finally we'll need pipenv a python utility to manage installed packages. To install pipenv use pip : sudo pip3 install --user pipenv If you don't have pipenv command use sudo pip install -U pipenv If you get the following error: Traceback (most recent call last): File \"/usr/bin/pip3\", line 9, in <module> from pip import main ImportError: cannot import name 'main' It's a known error sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall Set-up the project Installing the core First you need to clone the project. The stable branch is master as others branchs contains changes that may break the instance. git clone https://github.com/anforaProject/anfora.git Once you have cloned the repository we need to install the dependencies cd anfora pipenv install --python python3.6 This will create a virtual environement to work with python and automaticly it'll install all the packages needed. Creating a settings file Now we need to create the settings file ( An script to make easier this process will be included in future releases ). To do this we need to create a .yaml file with the necessary configuration: Inside the folder src/config you have two examples of configurations. You can create a new copy and just override the values. cp src/config/dev.yaml src/config/my_config.yaml Here you should pay attention to the http config and the storage config. The media folder will contain all the media files and the *_folder are subfolders with different objetives. Once you have your configuration file ready we need to crate the settings file. cd src pipenv run python commands.py -s --config config/my_config.yaml This will change the configuration file at src/settings.py Installing the web client Now we need to add the web client. For this we will clone as follow git clone https://github.com/anforaProject/client.git Now we need to compile the client files. To do this just type cd client yarn install yarn build This will create a dist folder that is the one needed by the core to render the html. Creating the db Anfora requires access to a PostgreSQL instance. Create a user for a PostgreSQL instance: su - postgres createuser -U postgres -s YOURUSERNAME exit Now edit /etc/postgresql/10/main/pg_hba.conf so host all all 127.0.0.1/32 trust We have changed md5 to trust in the last column. Note that we do not set up a password of any kind, this is because we will be using ident authentication. This allows local users to access the database without a password. We'll need to sync the db. To do this just type cd .. pipenv run python commands.py -d Creating a new user To create a user type pipenv run python create_user.py And follow the instructions Configuring nginx We need nginx to manage our conections with the world. Type cd /etc/nginx/sites-available and then nano anfora.conf (you can use your favorite editor). Your configuration should be similar to: map $http_upgrade $connection_upgrade { default upgrade; '' close; } # the upstream component nginx needs to connect to server { server_name www.anfora.test anfora.test; rewrite ^(.*) https://anfora.test$1 permanent; } # configuration of the server server { listen 443; ssl on; server_name anfora.test; ssl_protocols TLSv1.2; ssl_ciphers HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_certificate /etc/ssl/certs/zinat.crt; ssl_certificate_key /etc/ssl/private/zinat.key; keepalive_timeout 70; # the domain name it will serve for charset utf-8; gzip on; gzip_disable \"msie6\"; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # max upload size client_max_body_size 75M; # adjust to taste # Django media location /media/files { alias /home/anforaUser/uploads; # Folder where you save the uploaded media } location /js { alias /home/anforaUser/anfora/src/client/dist/js; } location /css { alias /home/anforaUser/anfora/src/client/dist/css; } location /api/v1/streaming/ { proxy_pass http://127.0.0.1:4000; proxy_buffering off; proxy_redirect off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; tcp_nodelay on; } location / { proxy_pass http://127.0.0.1:3000; } } Here you should change: The server_name to match yours. Fix the paths in alias . Change the certs in ssl_certificate We recomend certbot to manage your certs in production. Save the changes and use ln -s ../sites-available/anfora.conf to create a symbolic link to the config file so nginx can read it. Finally restart nginx using sudo nginx -s reload . Starting services The process that you need to start are: redis-server anfora server anfora node server huey consumer (tasks manager) To continue I'll assume that you have an user called anforaUser and that the root of the project is at home/anforaUser/anfora/ WIP Start the redis server using redis-server Start huey running: cd src && pipenv run huey_consumer.py tasks.main.huey -m 1 -w 4 Start the server with cd src && pipenv run python main.py","title":"Installation"},{"location":"getting-started/#installation-guide-wip","text":"","title":"Installation guide - WIP"},{"location":"getting-started/#0-prerequisites","text":"We will using: A Ubuntu based distro Root access on the machine A domain Python 3.6 nginx (you can use apache too)","title":"0. Prerequisites"},{"location":"getting-started/#1-setting-up-the-environement","text":"Update your package list and system: sudo apt update sudo apt upgrade Older dristribution of ubuntu don't include python3.6 and we'll need it. Depending on your OS version you may need to install it. Install the dev packages and necessary things for python to compile packages. sudo apt install build-essential libssl-dev libffi-dev python3-dev You'll need git and yarn to download and install dependencies. sudo apt install git To install yarn please read the instructions at their official webpage","title":"1. Setting up the environement"},{"location":"getting-started/#other-dependencies","text":"redis-* - Used to queue tasks and as in-memory data store structure imagemagick - Image related operations ffmpeg - Conversion of videos to mp4 nodejs - Used for the streaming API To install them use: sudo apt install imagemagick ffmpeg nginx redis-server redis-tools postgresql postgresql-contrib python3-pip Finally we'll need pipenv a python utility to manage installed packages. To install pipenv use pip : sudo pip3 install --user pipenv If you don't have pipenv command use sudo pip install -U pipenv If you get the following error: Traceback (most recent call last): File \"/usr/bin/pip3\", line 9, in <module> from pip import main ImportError: cannot import name 'main' It's a known error sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall","title":"Other dependencies"},{"location":"getting-started/#set-up-the-project","text":"","title":"Set-up the project"},{"location":"getting-started/#installing-the-core","text":"First you need to clone the project. The stable branch is master as others branchs contains changes that may break the instance. git clone https://github.com/anforaProject/anfora.git Once you have cloned the repository we need to install the dependencies cd anfora pipenv install --python python3.6 This will create a virtual environement to work with python and automaticly it'll install all the packages needed.","title":"Installing the core"},{"location":"getting-started/#creating-a-settings-file","text":"Now we need to create the settings file ( An script to make easier this process will be included in future releases ). To do this we need to create a .yaml file with the necessary configuration: Inside the folder src/config you have two examples of configurations. You can create a new copy and just override the values. cp src/config/dev.yaml src/config/my_config.yaml Here you should pay attention to the http config and the storage config. The media folder will contain all the media files and the *_folder are subfolders with different objetives. Once you have your configuration file ready we need to crate the settings file. cd src pipenv run python commands.py -s --config config/my_config.yaml This will change the configuration file at src/settings.py","title":"Creating a settings file"},{"location":"getting-started/#installing-the-web-client","text":"Now we need to add the web client. For this we will clone as follow git clone https://github.com/anforaProject/client.git Now we need to compile the client files. To do this just type cd client yarn install yarn build This will create a dist folder that is the one needed by the core to render the html.","title":"Installing the web client"},{"location":"getting-started/#creating-the-db","text":"Anfora requires access to a PostgreSQL instance. Create a user for a PostgreSQL instance: su - postgres createuser -U postgres -s YOURUSERNAME exit Now edit /etc/postgresql/10/main/pg_hba.conf so host all all 127.0.0.1/32 trust We have changed md5 to trust in the last column. Note that we do not set up a password of any kind, this is because we will be using ident authentication. This allows local users to access the database without a password. We'll need to sync the db. To do this just type cd .. pipenv run python commands.py -d","title":"Creating the db"},{"location":"getting-started/#creating-a-new-user","text":"To create a user type pipenv run python create_user.py And follow the instructions","title":"Creating a new user"},{"location":"getting-started/#configuring-nginx","text":"We need nginx to manage our conections with the world. Type cd /etc/nginx/sites-available and then nano anfora.conf (you can use your favorite editor). Your configuration should be similar to: map $http_upgrade $connection_upgrade { default upgrade; '' close; } # the upstream component nginx needs to connect to server { server_name www.anfora.test anfora.test; rewrite ^(.*) https://anfora.test$1 permanent; } # configuration of the server server { listen 443; ssl on; server_name anfora.test; ssl_protocols TLSv1.2; ssl_ciphers HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_certificate /etc/ssl/certs/zinat.crt; ssl_certificate_key /etc/ssl/private/zinat.key; keepalive_timeout 70; # the domain name it will serve for charset utf-8; gzip on; gzip_disable \"msie6\"; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # max upload size client_max_body_size 75M; # adjust to taste # Django media location /media/files { alias /home/anforaUser/uploads; # Folder where you save the uploaded media } location /js { alias /home/anforaUser/anfora/src/client/dist/js; } location /css { alias /home/anforaUser/anfora/src/client/dist/css; } location /api/v1/streaming/ { proxy_pass http://127.0.0.1:4000; proxy_buffering off; proxy_redirect off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; tcp_nodelay on; } location / { proxy_pass http://127.0.0.1:3000; } } Here you should change: The server_name to match yours. Fix the paths in alias . Change the certs in ssl_certificate We recomend certbot to manage your certs in production. Save the changes and use ln -s ../sites-available/anfora.conf to create a symbolic link to the config file so nginx can read it. Finally restart nginx using sudo nginx -s reload .","title":"Configuring nginx"},{"location":"getting-started/#starting-services","text":"The process that you need to start are: redis-server anfora server anfora node server huey consumer (tasks manager) To continue I'll assume that you have an user called anforaUser and that the root of the project is at home/anforaUser/anfora/ WIP Start the redis server using redis-server Start huey running: cd src && pipenv run huey_consumer.py tasks.main.huey -m 1 -w 4 Start the server with cd src && pipenv run python main.py","title":"Starting services"}]}